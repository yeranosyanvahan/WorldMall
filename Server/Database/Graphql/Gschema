# Define interfaces
interface Info {
  info: String
  details: [String]
}
# Define Types

type Item implements Info {
  product: Product! @hasInverse(field: pricing)
  store: Store!
  price: Int!
  discount: Int
  pricehistory: [Int]
}

type Category {
 category: String! @search(by: [trigram])  @id # search by laveshtain distance
 subcategory: [Category] @hasInverse(field: topcategory)
 topcategory: [Category]
 products: [Product] @hasInverse(field: category)
}

type Product {
 id: ID!
 product: String! @search(by: [term, fulltext])
 created_at: DateTime!
 category: Category
 pricing: [Item]
 property: [Property]
}

type Property implements Info {
 property: String! @search(by: [exact])  # and this
 strs: [String]
 ints: [Int]
 floats: [Float]
 geos: [Point]
 datetime: [DateTime]
 products: Product! @hasInverse(field: property)
}

type Store implements Info {
    store: String! @search(by: [trigram]) @id      # and this
    owner: User !
    geolocation: Point!
    created_at: DateTime!
    address: String
    city: City
}

type User  @secret(field: "password", pred: "password") {
  fname: String!
  username: String! @id
  token: String #json token
  email: String
  created_at: DateTime!
  phone_number: String
  cart: [Cart]
  stores: [Store] @hasInverse(field: owner)
}

type Cart {
  name: String!
  owner: User! @hasInverse(field: cart)
  items: [Item]
  products: [Product]
}

type Order implements Info {
  created_at: DateTime!
  delivered_at: DateTime
  shipping_address: String!
  geolocation: Point
  user: User!
  driver: User
  items: [Item]!
  returned: Boolean
  delivered: Boolean!
}

type City {
    city: String! @search(by: [trigram]) @id     # search this too
    geolocation:  Polygon!
    stores: [Store] @hasInverse(field: city)
}
